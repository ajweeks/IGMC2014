package ca.ajweeks.igmc2014.level;

public class Levels {
	
	//TODO add saving feature
	
	//@formatter:off
	public static Chunk[][] lvlOneChunks = new Chunk[][] { 
			{ //y == 0 (top row)
			new Chunk(
					Tile.IntArrayToTileArray(0, 0,
					new int[][] {
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } })),
				
			new Chunk(
					Tile.IntArrayToTileArray(1, 0, 
					new int[][] { 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } })),
				
			new Chunk(
					Tile.IntArrayToTileArray(2, 0, 
					new int[][] { 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } })),
					
					new Chunk(
					Tile.IntArrayToTileArray(3, 0,
					new int[][] { 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 2, 2, 2, 2, 0, 0, 0, 0, 0, 0 }, 
					{ 1, 1, 1, 1, 2, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 2, 2 }, 
					{ 0, 0, 0, 0, 0, 0, 0, 2, 1, 1 } })) },
					
			{ // y == 1 (bottom row)
			new Chunk(
					Tile.IntArrayToTileArray(0, 1,
					new int[][] {
					{ 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 },
					{ 0, 0, 0, 5, 0, 0, 0, 3, 2, 2 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 2, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 2, 1, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 5, 0, 0, 0, 0, 0, 0, 0 },
					{ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 2, 2, 2, 2, 2, 2, 2, 2 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } })),
				
			new Chunk(
					Tile.IntArrayToTileArray(1, 1, 
					new int[][] { 
					{ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 2, 4, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 0, 0, 0, 5, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 2, 2, 2 },
					{ 0, 0, 0, 0, 0, 0, 2, 1, 1, 1 }, 
					{ 0, 0, 0, 2, 2, 2, 1, 1, 1, 1 },
					{ 0, 2, 2, 1, 1, 1, 1, 1, 1, 1 },
					{ 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } })),
					
			new Chunk(
					Tile.IntArrayToTileArray(2, 1, 
					new int[][] { 
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
					{ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0 },
					{ 1, 1, 1, 2, 2, 2, 2, 2, 0, 0 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 2, 0 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } })),
			new Chunk(
					Tile.IntArrayToTileArray(3, 1, 
					new int[][] { 
					{ 0, 0, 0, 0, 0, 0, 2, 1, 1, 1 },
					{ 0, 0, 0, 0, 0, 2, 1, 1, 1, 1 }, 
					{ 0, 0, 0, 0, 2, 1, 1, 1, 1, 1 }, 
					{ 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
					{ 0, 0, 0, 2, 1, 1, 1, 1, 1, 1 }, 
					{ 2, 2, 2, 1, 1, 1, 1, 1, 1, 1 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } })) }
		};
	//@formatter:on
	
}
